---
title: "<img data-src='images/logo-essalud.png' height='72' width='250'/> <img data-src='images/logo-pueblo.jpg' height='72' width='250'/> <img data-src='images/logo-ietsi.png' height='72' width='250'/> <FONT color='#232429'><br>Sesión 1b</FONT>"
subtitle: "<FONT color='#636363' size='7'>Programa de Formación Científica:<br>Análisis Estadístico 2022</FONT>"
author: "<FONT color='#232429' size='30'>Percy Soto-Becerra</FONT>"
institute: "<FONT color='#232429' size='5'>Instituto de Evaluación de Tecnologías en Salud e Investigación - IETSI, EsSalud<br>@github/psotob</FONT>"
date: "<FONT color='#232429' size='6'>Junio 15, 2022</FONT>"
format: 
  revealjs: 
    theme: default
    footer: "Programa de Formación Científica: Análisis Estadístico 2022 - Sesión 1b"
    logo: images/logo-ietsi.png
    transition: convex
    background-transition: zoom
    incremental: false
    slide-number: true
    preview-links: true
    # parallax-background-image: images/bg-ietsi-slide-first.png
    # parallax-background-size: "1920px 1080px"
    chalkboard: true
    code-block-background: true
    code-block-border-left: "#31BAE9"
    highlight-style: solarized
    echo: true
    multiplex: true
    touch: true
    auto-stretch: true
    link-external-icon: true
    link-external-newwindow: true
---

```{r}
#| echo: false
#| output: false

# Removing all objects including loaded libraries
rm(list = ls(all = TRUE))
gc()

# Installing and loading packages
if (!require("pacman")) {
  install.packages("pacman")
}

pacman::p_unload("all") # Unloading all package except base

pacman::p_load(tidyverse) # Loading packages
```

# Manejo básico de R

## R base funciona como una calculadora

::: panel-tabset
### Básicas 1

::: columns
::: {.column width="50%"}
-   Suma:

```{r}
#| echo: true
3 + 8
```

-   Resta:

```{r}
#| echo: true
3 - 8
```
:::

::: {.column width="50%"}
-   Multiplicación

```{r}
#| echo: true
3 * 8
```

-   División

```{r}
#| echo: true
3 * 8
```
:::
:::

### Básicas 2

::: columns
::: {.column width="50%"}
-   Potencia:

```{r}
#| echo: true
3 ^ 3 # ^ se obtiene mediante: ALT + 94
```

-   Raíz cuadrada:

```{r}
#| echo: true
sqrt(16)
```
:::

::: {.column width="50%"}
-   Otra raíz

```{r}
#| echo: true
8 ^ (1 / 3) # Raíz cúbica
```

-   Operación combinada

```{r}
#| echo: true
15 + (64 - 60) ^ (1/2)
```
:::
:::

### Avanzadas 1

::: columns
::: {.column width="50%"}
-   Logaritmo natural:

```{r}
#| echo: true
log(12) # log es logaritmo natural o neperiano
```

-   Logaritmo base 10:

```{r}
#| echo: true
log10(100)
```
:::

::: {.column width="50%"}
-   Exponencial

```{r}
#| echo: true
exp(2)
```

-   pi

```{r}
#| echo: true
pi
```
:::
:::

### Comparaciones

::: columns
::: {.column width="50%"}
-   Mayor que:

```{r}
#| echo: true
5 > 4
```

-   Menor igual que:

```{r}
#| echo: true
6 <= 3
```
:::

::: {.column width="50%"}
-   Igualdad:

```{r}
#| echo: true
7 == 7
```

-   Diferente:

```{r}
#| echo: true
8 != 5
```
:::
:::
:::

## Todo en R es un objeto

-   Hay varios tipos de objetos.

-   Los datos se estructuran como objetos para almacenar información.

    -   Son como los `sustantivos` de una oración.

    -   Se construyen sobre estructuras básicas.

-   Las funciones son objetos que realizan acciones sobre otros.

    -   Son como los `verbos` de una oración.

## Estructuras de datos en R

![](images/estructuras-r.png)

## Vectores atómicos en R

-   Los `vectores (atómicos)` guardan datos en una columna o fila (solo 1 de ellas).

-   Un número es un vector de un solo elemento

```{r}
# Presión arterial sistólica de Juan
122.3
```

-   Varios números se pueden almacenar en un vector

```{r}
# Presiones arteriales sistólicas de Juan, María y Sandra
c(122.3, 142.1, 100.2)
```

## Operador asignar en R

-   Para poder reutilizar los datos y manipularlos, preferimos ponerles un nombre para poder convocarlos después:

```{r}
# Presiones arteriales sistólicas de Juan, María y Sandra 
# se guardan con el nombre que Ud. quieran:
pas <- c(122.3, 142.1, 100.2) # <- Operador asignar, es una flecha
```

-   El objeto de nombre `pas` no se imprime pero aparece en el ambiente (`environment`) de RStudio. <FONT size='6'>
    -   Existe pero no puedes ver su contenido en la consola.

    -   Solo un resumen en las pestaña de `environment`. </FONT>

        <center>

        ![](images/environment-work.png)

        </center>

## Imprimir el contenido de un objeto

-   Para ver lo que un objeto contiene, solo hay que poner su nombre en el script de código:

```{r}
pas
```

-   Veamos un ejemplo más: <br> <FONT size='5'>**Crear objeto:** Introducir datos con **`c()`**.</FONT>\
    <FONT size='5'>**Nombrarlo:** Usar asignar **`<-`** par darle un `mote`.</FONT>\
    <FONT size='5'>**Imprimir su contenido:** Correr el `mote` para convocarlo.</FONT>

```{r}
# Presiones arteriales diastólicas de Juan, María y Sandra 
pad <- c(74, 81, 79)
pad
```

## Operador asignar es coercitivo

-   El operador asignar tiene `tipado dinámico`.

-   Si a un objeto le pones el nombre de otro, entonces R olvidará al objeto anterior:

```{r}
# El primer objeto c(25, 32) se llama "peso"
peso <- c(55, 62)
peso
```

```{r}
# El segundo objeto c(45, 80) quiero guardarlo con el nombre "peso"
peso <- c(45, 80) # R olvidará al objeto c(25, 32)
peso              # Y guardará al nuevo objeto c(45, 80) como "peso"
```

-   Mucho cuidado, mejor usa nuevos nombres si no quieres perder datos.

## Podemos hacer operaciones con los elementos de los vectores

-   Imaginen que desean calcular la `presión arterial media` de Juan, María y Sandra de acuerdo con la siguiente fórmula:

<FONT size='4'> $$PAM = \frac{PAS + 2PAD}{3}$$ </FONT>

-   Esto se puede calcular usando los vectores:

```{r}
# Cálculo de presión arterial media: pam
pam <- (pas + 2 * pad) / 3 
pam
```

## Los vectores atómicos tienen varios tipos de estructuras de datos {.scrollable}

::: panel-tabset
### Double

**`Vector numérico double`**:

-   Acepta decimales.
-   Análogo a la variable numérica continua.

```{r}
# Peso de Juan, María y Sandra
peso <- c(75.2, 82.1, 59.3)
typeof(peso)
```

### Integer

**`Vector numérico entero`**:

-   Solo enteros (no decimales).
-   Análogo a la variable numérica discreta.

```{r}
# Número de hijos de Juan, María y Sandra
nhijos <- c(2L, 0L, 3L) # La L fuerza a ser entero
typeof(nhijos)
```

### Character

**`Vector character`**:

-   Almacena cadenas de texto (*strings*).
-   Análogo a la variable categórica.

```{r}
# Sexo de Juan, María y Sandra
sex <- c("masculino", "Femenino", "mujer")
sex
```

### Logic

**`Vector lógico`**:

-   Almacena datos lógicos: `TRUE`, `FALSE`, `NA`.
-   Análogo a una variable binaria.

```{r}
# "Tiene diabetes" para Juan, María y Sandra
diabetes <- c(TRUE, FALSE, T) # Se puede usar T o F
```

### Logic 2

<FONT size='6'>*`¿La presión arterial sistólica es mayor a la diastólica para Juan, María y José?`*</FONT>

```{r}
# Recuerde el orden: Juan, María y Sandra
pas > pad
```

```{r}
pas_mayor_pad <- pas > pad
pas_mayor_pad
```

```{r}
typeof(pas_mayor_pad)
```
:::

## En resumen, los tipos básico de vectores son:

![](images/tipos-datos-basicos.png)

::: aside
<br> <FONT size='4'>*Adaptado de ggplot2 and the tidyverse. PMAP 8521.* \[[Enlace](https://evalsp21.classes.andrewheiss.com/projects/01_lab/slides/01_lab.html#1)\]</FONT>
:::

## Los data.frame y data.tibble almacenan varios vectores

-   Los vectores están limitados a un único tipo de dato.

-   Si quiero `apilar` varios vectores con distitos tipos de datos se requiere usar un `data.frame` (forma `nativa` de R base)-

-   Los `data.tibble` son una versión aumentada de los `data.frame` del `tidyverso` (forma `más elegante` de `data.frame`)

-   Las funciones que funcionan con `data.frames` también lo hacen con `data.tibbles`.

## Para análisis las tablas de datos rectangulares son más apropiadas

-   Tabla de datos rectangular:

![<FONT size='4'>*Adaptado de Smit Aj, Abrahams A & Schlegel RW. Intro R Workshop: Data Manipulation, Analysius, and Visualization.*</FONT>](images/table-datos.png)

## Los data.frame son tablas de datos rectangulares {.scrollable}

-   `data.frame` y `data.tibble` guardan los datos en `tablas de datos rectangulares`.

-   Un ejemplo de `data.frame`:

```{r}
datos <- data.frame(
  pas = c(122.3, 142.1, 100.2), 
  pad = c(74, 81, 79), 
  pam = c(90.10000, 101.36667, 86.06667)) 

datos
```

-   Un ejemplo de `data.tibble`:

```{r}
as_tibble(datos)
```

## Instalación y uso de paquetes

-   **Instalación de paquete:**

``` r
install.packages("nombre_paquete") 
```

-   **Cargar paquete:**

``` r
library(nombre_paquete)
```

-   **Ayuda con el paquete:**

``` r
??nombre_paquete
```

-   **Más sobre paquetes:** [aquí](https://estadistica-dma.ulpgc.es/cursoR4ULPGC/5-librerias.html)

## Un ejemplo {.scrollable}

-   **Instalen Hmisc:**

``` r
install.packages("Hmisc") 
```

![](images/install-packages.png)

-   **Carguen el paquete Hmisc:**

``` r
library(Hmisc)
```

![](images/library.png)

-   **Consulten la ayuda del paquete Hmisc**

``` r
??Hmisc
```

![](images/ayuda-package.png)

## Ahora es su turno

-   **Instalen tidyverse:**

``` r
install.packages("tidyverse") 
```

-   **Carguen el metapaquete tidyverse:**

``` r
library(tidyverse)
```

-   **Consulten la ayuda del metapaquete tidyverse**

``` r
??tidyverse
```

## Funciones

-   Fragmento de código empaquetado que facilita su reutilización con diferentes datos iniciales.

-   Realizan un acción sobre objetos para producir un resultado.

-   Los `paquetes` contienen una o más funciones que realizan tareas relacionadas.

## Partes de una función

-   Un solo argumento:

``` r
función(argumento = "opción")
```

-   Varios argumentos:

<FONT size='6'>Estructura básica:</FONT>

``` r
función(argumento1 = "opción1", argumento2 = "opción2")
```

<FONT size='6'>Puedes obviar el nombre del "argumento" si y solo si se mantiene el orden:</FONT>

``` r
función("opción1", "opción2")
```

<FONT size='6'>Caso contrario, debes especificar el nombre del argumento:</FONT>

``` r
función(argumento2 = "opción2", argumento1 = "opción1")
```

## Preparando R para trabajar con datos

1.  Crear un carpeta donde tendrá el proyecto.
2.  Crear un Proyecto de RStudio.
3.  Colocar los datos en la misma Carpeta que el proyecto.
4.  Abrir Notebook de RMarkdown y comenzar a codear!

## Preparando R para trabajar con datos

### 1. Crear un carpeta donde tendrá el proyecto.

![](images/crear-carpeta.png)

## Preparando R para trabajar con datos

### 1. Crear un carpeta donde tendrá el proyecto.

![](images/crear-carpeta2.png)

## Preparando R para trabajar con datos

### 2. Crear un Proyecto de RStudio

![](images/nuevo-proyecto.png)

## Preparando R para trabajar con datos

### 3. Colocar los datos en la misma Carpeta que el proyecto

![](images/colocar-datos.png)

## Preparando R para trabajar con datos

### Crear Notebook de RMarkdown

![](images/abrir-notebook.png)

## Preparando R para trabajar con datos

### Comenzar a codear en notebook de RMarkdown!

![](images/notebook.png)

## Importar datos con tidyverse

![](images/importar.png)

## Importar datos

-   Importar datos de excel:

```{r}
library(readxl)
mis_datos <- read_excel("maca_meno_perclin.xlsx")
```

-   Explorar datos importados

```{r}
head(mis_datos) #Muestra primeras fials de ejemplo
```

## Importar datos

-   Importar datos de Stata:

```{r}
library(haven) 
mis_datos <- read_stata("maca_meno_fase1.dta")
```

-   Explorar datos importados:

```{r}
head(mis_datos) #Muestra primeras fials de ejemplo
```

## El problema de importar datos de Stata

-   Las etiquetas de variable se importan.

![](images/etiquetas_var.png)

-   Pero no las etiquetas de valor.

## Solución al problema de importar datos en Stata

-   Si quieres heredar metadatos de la etiqueta de valor:

```{r}
mis_datos <- read_stata("maca_meno_fase1.dta") 
mis_datos <- as_factor(mis_datos)
```

```{r}
mis_datos
```

-   Las etiquetas de valor también se importan!!

## %\>%

-   Operador `pipe`: [**%\>%**](https://magrittr.tidyverse.org/reference/pipe.html) del paquete [`magrittr`](https://magrittr.tidyverse.org/index.html) de [`tidyverse`](https://www.tidyverse.org/).

-   Conector de secuencia de acciones.

![<FONT size='4'>*Fuente: Sesion2-Introduccion a R y RStudio. Andre Valle y Steev Loyola*</FONT> [<FONT size='4'>Enlace</FONT>](https://docs.google.com/presentation/d/1tadIMMxP6oy2JaXIBGIhWw2CNUXT9rNIbXbdBjP3Nrs/edit#slide=id.p)](images/oraciones_pipe.png)

## Operadar %\>% en acción

Esto de aquí:

```{r}
mis_datos <- read_stata("maca_meno_fase1.dta") 
mis_datos <- as_factor(mis_datos)
```

Se puede simplificar a esto:

```{r}
mis_datos <- read_stata("maca_meno_fase1.dta") %>% 
  as_factor()
```

## 

::: r-fit-text
Ahora es tu turno de aplicar lo revisado!!

Volvemos en 10 minutos.

No te desconectes, pero no veas las pantallas.
:::

# Manejo de datos

## Librería dplr

-   El paquete `dplyr` es una 'suite' de funciones para manipular dato

![](images/verbos-dplyr.png){fig-align="center"}

## Filtrado de datos con filter()

-   Extrae filas que cumplen cierta condición lógica

![](images/filter.png)

## Filtrado de datos con filter() y comparadores

![](images/filter-logica.png)

## Filtrado de datos con filter() y booleanos

![](images/filter-boolean.png)

## Filtrado de datos con filter() - ejemplo {.scrollable}

-   Se tienen los datos originales:

```{r}
datos_fase1 <- read_stata("maca_meno_fase1.dta") %>% 
  as_factor()

datos_fase1
```

-   Si se filtra solo para tener a los individuos en su **medición basal**:

```{r}
datos_fase1 %>% 
  filter(time == "Baseline")
```

-   Podemos querer filtrar a los individuos en la **medición basal** **`Y`** que sean **placebo**:

```{r}
datos_fase1 %>% 
  filter(time == "Baseline" & treat == "PLACEBO")
```

-   Podemos querer filtrar a los individuos en la **medición basal** **`O`** que sean **placebo**:

```{r}
datos_fase1 %>% 
  filter(time == "Baseline" | treat == "PLACEBO")
```

-   Si queremos solo las mujeres entre 34 y 38 años de edad:

```{r}
datos_fase1 %>% 
  filter(age >= 34 & age <= 38)
```

-   Si queremos a quienes son de Santa Anita, Callao, SMP o Carabayllo:

**Opción válida pero ineficiente**:

```{r}
datos_fase1 %>% 
  filter(procedence == "Santa Anita" | procedence == "Callao" | procedence == "SMP" | procedence == "Carabayllo")
```

**Opción válida y eficiente**:

```{r}
datos_fase1 %>% 
  filter(procedence %in% c("Santa Anita", "Callao", "SMP", "Carabayllo"))
```

<br>

## Selección de columnas con select()

-   La función `select()` selecciona columnas

-   El signo `-` permite elegir qué columnas eliminar.

-   A veces es mejor llamarla usando: `dplyr::select()` debido a que otros paquetes también tienen una función con el mismo nombre select()

## Selección de columnas con select() - ejemplo {.scrollable}

-   Los datos originales:

```{r}
datos_fase1
```

-   Si solo quiero seleccionar a id, time, age, race y procedence:

```{r}
datos_fase1_seleccionados <- datos_fase1 %>% 
  select(id, time, age, race, procedence)

datos_fase1_seleccionados 
```

-   Si quisiera excluir a procedence:

```{r}
datos_fase1_seleccionados %>% 
  select(-procedence) #notar el signo -
```

## Podemos anidar con %\>% varias tareas

```{r}
datos_fase1 %>% 
  filter(age > 35) %>% # Primero filtro por age
  select(id, time, treat, race, age) # Luego me quedo solo con estas 5 columnas
```

## Creación de nuevas columnas con mutate()

-   La función `mutate()` crea nuevas columnas en base a otras.

![](images/mutate.png)

## Creación de nuevas columnas con mutate() - ejemplo {.scrollable}

-   Si queremos crear la variable índice de masa corporal:

```{r}
datos_fase1 %>% 
  select(id, weight, height) %>% # Nos quedamos con peso y talla 
  mutate(imc = weight / height ^ 2) # Creamos IMC en base a peso y talla
```

## Modificación de columnas existentes con mutate()

-   `mutate()` también remplaza columnas existentes.

-   Tener cuidado si se quiere reutilizar la variable original, en ese caso es mejor crear columna nueva.

## Modificación de columnas existentes con mutate() - ejemplo {.scrollable}

-   Queremos que la edad sea reportada en meses:

**Podríamos crear una columna nueva para edad en meses:**

```{r}
datos_fase1 %>% 
  select(id, age) %>% 
  mutate(age2 = age * 12) # Notar que se creó una columa nueva llamada age2
```

**La otra opción es remplazar la edad:**

```{r}
datos_fase1 %>% 
  select(id, age) %>% 
  mutate(age = age * 12) # Notar que se remplazó age 
```

## Categorización de variables con case_when()

-   Función de apoyo a mutate().

-   Categoriza variables de acuerdo a condiciones complejas

![](images/caswe_when.png)

## Categorización de variables con case_when()-ejemplo {.scrollable}

-   Se quieren crear categorías de edad: 20-30, 31-35 y 36-41

```{r}
datos_fase1 %>% 
  select(id, age) %>% 
  mutate(agecat = case_when(age >= 20 & age <= 30 ~ "20-30", 
                            age >= 31 & age <= 35 ~ "31-35", 
                            age >= 36 & age <= 41 ~ "36-41", 
                            TRUE ~ as.character(NA))) # Siempre cerrar con esto
```

## Etiquetar variables con set_var_labels()

-   La función `set_var_labels()` del paquete `labelled()` es muy útil para etiquetar columnas.

-   Los datos deben tener metadatos que permitan ser legibles por el ser humano.

-   Esta función debería ser usada al final de todo el proceso.

## Etiquetar variables con set_var_labels() {.scrollable}

-   Veamos el ejemplo inicial:

![](images/sin-etiqueta.png)

-   Ahora pongamos una etiqueta:

```{r}
library(labelled)
datos2 <- datos %>% 
  set_variable_labels(
    pam = "Presión Arterial Media", 
    pas = "Presión Arterial Sistólica", 
    pad = "Presión Arterial Diastólica"
  )
```

![](images/con-etiqueta.png)

## 

::: r-fit-text
Ahora es tu turno de aplicar lo revisado!!

Volvemos en 10 minutos.

No te desconectes, pero no veas las pantallas.
:::

## 

::: r-fit-text
<br>

<center>

slides:

</center>

<center>

[https://bit.ly/3Okolxb](https://ietsi-academy-aed.netlify.app/sesiones/sesion-1/sesion-1b)

</center>
:::

## 

::: r-fit-text
<center>

**¡Gracias por su atención!**

</center>

<center>

**¡Encantado de responder sus consultas!**

</center>

<br>

<center>

**Percy Soto-Becerra**

</center>

<br>

<center>

`r icons::fontawesome$brands$twitter` `r icons::fontawesome$brands$github` @psotob91

</center>

<center>

`r icons::fontawesome$solid$inbox` **percys1991\@gmail.com**

</center>
:::

::: aside
<br> <FONT size='4'>Presentación creada vía `Revealjs` en `Quarto` en `RStudio`.</FONT>
:::
